Input String followed by Output:

1)
"happy rt56 34.06e-10 5.67e12 0 97 765 0x 0xfegh"
word: "happy"
word: "rt56"
floating point: "34.06e-10"
floating point: "5.67e12"
octal integer: "0"
decimal integer: "97"
decimal integer: "765"
octal integer: "0"
word: "x"
hexadecimal integer: "0xfe"
word: "gh"


2)
"abc123.97 abc0Xabfstring df076 ran*dom"
word: "abc123"
structure member: "."
decimal integer: "97"
word: "abc0Xabfstring"
word: "df076"
word: "ran"
multiply/dereference operator: "*"
word: "dom"

3)
"970x45ef 012 0.124 012.45 3^5"
decimal integer: "970"
word: "x45ef"
octal integer: "012"
floating point: "0.124"
floating point: "012.45"
decimal integer: "3"
bitwise XOR: "^"
decimal integer: "5"

4)
"123.07 /*commennt*/ \'passed\' \"gotit yes\" 123abc567.097e-56b 079 0 0x 0xdest +++ <==!= "
floating point: "123.07"
single quote: "'passed'"
double quote: ""gotit yes""
decimal integer: "123"
word: "abc567"
structure member: "."
decimal integer: "097"
word: "e"
decimal integer: "-56"
word: "b"
decimal integer: "079"
octal integer: "0"
octal integer: "0"
word: "x"
hexadecimal integer: "0xde"
word: "st"
increment: "++"
addition: "+"
less than or equal test: "<="
assignment: "="
inequality test: "!="

5)
"0xabcdef12.76e^-70x^-="
hexadecimal integer: "0xabcdef12"
structure member: "."
decimal integer: "76"
word: "e"
bitwise XOR: "^"
decimal integer: "-70"
word: "x"
bitwise XOR: "^"
minus equals: "-="

6)
"076 076.05 76"
octal integer: "076"
floating point: "076.05"
decimal integer: "76"

7)
"34.45 34.45e-10 34.45e23 34.45e+9 34.e"
floating point: "34.45"
floating point: "34.45e-10"
floating point: "34.45e23"
floating point: "34.45e+9"
decimal integer: "34"
structure member: "."
word: "e"

8)
".23 45. 0.23 45.0"
structure member: "."
decimal integer: "23"
decimal integer: "45"
structure member: "."
floating point: "0.23"
floating point: "45.0"

9)
"today is a //good day"
word: "today"
word: "is"
word: "a"

10)
"today is a /*good day*/ okay"
word: "today"
word: "is"
word: "a"
word: "okay"

11)
"today is a \n \"good\" \t \'day\'"
word: "today"
word: "is"
word: "a"
double quote: ""good""
single quote: "'day'"

12)
"rest45 int enum float CKeywords"
word: "rest45"
C keyword: "int"
C keyword: "enum"
C keyword: "float"
word: "CKeywords"

13)
"comments //go till new line \n done"
word: "comments"
word: "done"

14)
"sizeofabcd abcdsizeof"
word: "sizeofabcd"
word: "abcdsizeof"

15)
"trying quotes with escapes \"\t\n\" \'\t\n\v\' /* \t\n*/ end"
word: "trying"
word: "quotes"
word: "with"
word: "escapes"
double quote: ""	
""
single quote: "'	

'"
word: "end"

16)
"dog23\rsizeofabc\fcat\t\"gdf\" \'cd\' //good\n /*dg*/ done\n12.e3,,,+++-=-=-- enum"
word: "dog23"
word: "sizeofabc"
word: "cat"
double quote: ""gdf""
single quote: "'cd'"
word: "done"
decimal integer: "12"
structure member: "."
word: "e3"
comma: ","
comma: ","
comma: ","
increment: "++"
addition: "+"
minus equals: "-="
minus equals: "-="
decrement: "--"
C keyword: "enum"

17)
""
Empty string input, no tokens

18)
"+,++,+++,++++,+++++,++=,+++==/ 0x-123"
addition: "+"
comma: ","
increment: "++"
comma: ","
increment: "++"
addition: "+"
comma: ","
increment: "++"
increment: "++"
comma: ","
increment: "++"
increment: "++"
addition: "+"
comma: ","
increment: "++"
assignment: "="
comma: ","
increment: "++"
plus equals: "+="
assignment: "="
division: "/"
octal integer: "0"
word: "x"
decimal integer: "-123"


19)
"numbers 972 0x972 A8 0XA8 XA9 0982 072"
word: "numbers"
decimal integer: "972"
hexadecimal integer: "0x972"
word: "A8"
hexadecimal integer: "0XA8"
word: "XA9”
decimal integer: "0982"
octal integer: "072"


20)
"0Xx 0X1231488927"
octal integer: "0"
word: "Xx"
hexadecimal integer: "0X1231488927"

21)
"AAAA%08x.%04x.%05x.%=06x.%08x.%08x.%/09x.%=08x"
word: "AAAA"
mod: "%"
decimal integer: "08"
word: "x"
structure member: "."
mod: "%"
octal integer: "04"
word: "x"
structure member: "."
mod: "%"
octal integer: "05"
word: "x"
structure member: "."
mod equals: "%="
octal integer: "06"
word: "x"
structure member: "."
mod: "%"
decimal integer: "08"
word: "x"
structure member: "."
mod: "%"
decimal integer: "08"
word: "x"
structure member: "."
mod: "%"
division: "/"
decimal integer: "09"
word: "x"
structure member: "."
mod equals: "%="
decimal integer: "08"
word: "x"

22)
"0X0x01789..."
hexadecimal integer: "0X0"
word: "x01789"
structure member: "."
structure member: "."
structure member: "."

23)
"[[def]))()que 0xbac"
left bracket: "["
left bracket: "["
word: "def"
right bracket: "]"
right parenthesis: ")"
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
word: "que"
hexadecimal integer: "0xbac"

24)
"sizeof(c) <= monkey[array]"
sizeof: "sizeof"
left parenthesis: "("
word: "c"
right parenthesis: ")"
less than or equal test: "<="
word: "monkey"
left bracket: "["
word: "array"
right bracket: "]"


25)
"123.44333429873e+2a9923.33^C545e-17 30x0"
floating point: "123.44333429873e+2"
word: "a9923"
structure member: "."
decimal integer: "33"
bitwise XOR: "^"
word: "C545e"
decimal integer: "-17"
decimal integer: "30"
word: "x0"

26)
"if case is while ^&"
C keyword: "if"
C keyword: "case"
word: "is"
C keyword: "while"
bitwise XOR: "^"
AND/address operator: "&"
