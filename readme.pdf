Assignment 0: Tokenizer
A program in C that takes String inputs of any size and separates it into specific tokens.

Types of Tokens Addressed in this program:

Decimal Integer:  a digit character followed by any number of digit characters

Octal Integer:  '0' character followed by any number of octal digits (0-7)

Hexadecimal Integer: "0x" (or "0X") followed by any number of hexadecimal digits (0-9, af, A-F)

Word: consists of an alphabetic character followed by any number of alphanumeric characters

Floating Point:  a decimal integer that has a '.' at any position other than the last. It may optionally contain an exponent in scientific notation at the end

C Operators: 44 operators that get identified as operator token

Strings: printed in Double and Single Quotes as they were inputted
Example
input:  "good /"after/" noon"
output: Double Quote: ""after""

Comments in C: These are skipped as they are comments. Comments starting with // end when they hit a \n or \0. Comments starting with /* end when they hit */

C Keywords: Keywords like int, enum, float, etc are identified as C keywords from the input string

Compilation: Compile as follows in the command line
$ gcc -o tokenizer tokenizer.c

Run: Must run with two arguments in command line
./tokenizer "input string"

Some strings with escape characters cannot be passed as command line arguments, to input such strings directly in the program, do as follows:
Open tokenizer.c
Comment out line 827, 828 annd 829
Uncomment line 833
On line 833, input your string
save and exit the C file
Compile and run as
./tokenizer "random string"

OR

Use a method of your choice in order to input various strings as an argument to the program, no more than 2 arguments allowed.